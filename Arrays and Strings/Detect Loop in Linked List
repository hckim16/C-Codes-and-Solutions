// Header

#ifndef list_hpp
#define list_hpp

#include <stdio.h>

class list{
private:
    struct node{
        int value;
        node *next;
    };
    node *head;
    node *current;
    node *temp;
public:
    list();
    //~list();
    void addFront(int e);
    void addBack(int e);
    bool isEmpty();
    //void remove();
    void findLoop();
    void test();

};

#endif /* list_hpp */

// Implementation

#include <iostream>
#include <cstdlib>

#include "list.hpp"

using namespace std;

list::list(){
    head = NULL;
    current = NULL;
}

/*list::~list(){
    while(!isEmpty()){
        remove();
    }
}*/

bool list::isEmpty(){
    return (head == NULL);
}

/*void list::remove(){
    node *old = head;
    head = old->next;
    delete old;
}*/

void list::addFront(int v){
    node *temp = new node;
    temp-> value = v;
    temp-> next = head;
    head = temp;
}

void list::addBack(int v){
    node *temp = new node;
    temp-> next = NULL;
    temp-> value = v;
    if(head != NULL){
        current = head;
        while(current-> next != NULL){
            current = current-> next;
        }
        current-> next = temp;
    }
    else{
        head = temp;
    }
}

void list::findLoop(){ 
    node *slow = head;                            //set slow pointer that moves one node at a time
    node *fast = head;                            //set fast pointer that moves two node at a time
    while(fast != NULL && fast-> next != NULL){   //while neither is NULL
        fast = fast-> next-> next;                //increment two nodes
        slow = slow-> next;                       //increment one one
        if(fast == slow)                          //if fast node equals slow node, there is a loop - break out of while loop
            break;                                //go to else statement
    }
    if(fast == NULL || slow == NULL)              //loop ends without fast == slow
        cout << "There is no loop" << endl;       //there is no loop
    else{
        slow = head;                              //set slow back to head
        while(slow != fast){                      //while slow not equal to fast, 
            slow = slow-> next;                   //increment slow one
            fast = fast-> next;                   //increment fast one
        }                                         //loop ends when fast equals slow which is node where loop begins
        cout << "The collision node is " << fast << " " << endl; // collison node address
        cout << "The value in collison node is << fast-> value << endl; //cout value at node
    }
}
/* commented out but this is function that creates loop to test findLoop function
void list::test(){
    current = head;
    current-> next-> next-> next-> next-> next = current-> next -> next-> next;
}
*/

// Main File

#include <iostream>
#include <cstdlib>

#include "list.hpp"

using namespace std;


int main() {
    
    list a;

    
    a.addBack(3);
    a.addBack(6);
    a.addBack(9);
    a.addBack(2);
    a.addBack(1);
    a.addBack(9);
    a.addBack(6);
    a.addBack(3);
    //a.test();         //commented out, but function call to create loop to test findLoop function
    a.findLoop();
    
    cout << endl;
    
    return 0;
}
