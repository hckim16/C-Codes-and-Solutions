// Header File

#ifndef list_hpp
#define list_hpp

#include <stdio.h>

class list{
private:
    struct node{
        int value;
        node *next;
    };
    node *head;
    node *current;
    node *temp;
    node *temp1;
public:
    list();
    //~list();
    void addFront(int e);
    void addBack(int e);
    void display();
    bool isEmpty();
    //void remove();
    bool compare(node *a, node *b);
    node *getHead();
    void findIntersection(list b);

};

#endif /* list_hpp */

// Implementation File

#include <iostream>
#include <cstdlib>

#include "list.hpp"

using namespace std;

list::list(){
    head = NULL;
    current = NULL;
}

/*
list::~list(){
    while(!isEmpty()){
        remove();
    }
}
*/

bool list::isEmpty(){
    return (head == NULL);
}

/*
void list::remove(){
    node *old = head;
    head = old->next;
    delete old;
}
*/

list::node *list::getHead(){
    return head;
}

void list::addFront(int v){
    node *temp = new node;
    temp-> value = v;
    temp-> next = head;
    head = temp;
}

void list::addBack(int v){
    node *temp = new node;
    temp-> next = NULL;
    temp-> value = v;
    if(head != NULL){
        current = head;
        while(current-> next != NULL){
            current = current-> next;
        }
        current-> next = temp;
    }
    else{
        head = temp;
    }
}

void list::display(){
    current = head;
    while(current != NULL){
        cout << current-> value << " ";
        current = current-> next;
    }
    cout << endl;
}

bool list::compare(node *a, node *b){     //compares two list to find intersection, if it exist
    while(a != NULL){
        if(a-> value != b-> value){
            a = a-> next;
            b = b-> next;
        }
        else{
            return false;
            break;
        }
    }
    return (a == NULL);
}

void list::findIntersection(list b){
    
    temp = head;
    temp1 = b.getHead();
    int count = 0;
    int count1 = 0;
    
    while(temp != NULL){            //count to determine length of each list
        count++;
        temp = temp-> next;
    }
    
    while(temp1 != NULL){           //count to determine length of each list
        count1++;
        temp1 = temp1-> next;
    }
    
    int diff = abs(count - count1); //determine difference in length
    temp = head;
    temp1 = b.getHead();
    
    if(count > count1){             //increment the longer list until both list are the same length
        for(int i = 1; i <= diff; i++){
            temp = temp-> next;
        }
    }
    else{
        for(int i = 1; i <= diff; i++){
            temp1 = temp1-> next;
        }
    }

    if(!compare(temp, temp1))     //once length same, compare values to determine if there is an intersection
        cout << "The 2 lists intersect" << endl;
    else
        cout << "The 2 lists do not intersect" << endl;
}

// Main File

#include <iostream>
#include <cstdlib>

#include "list.hpp"

using namespace std;


int main() {
    
    list a;
    list b;
    
    a.addBack(3);
    a.addBack(6);
    a.addBack(9);
    a.addBack(1);
    a.addBack(1);
    a.addBack(9);
    a.addBack(6);
    a.addBack(3);
    a.display();
    cout << endl;
    b.addBack(10);
    b.addBack(4);
    b.addBack(7);
    b.addBack(8);
    b.addBack(5);
    b.addBack(3);
    b.display();
    
    a.findIntersection(b);
    
    return 0;
}
