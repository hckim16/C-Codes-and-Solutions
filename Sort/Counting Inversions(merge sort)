#include <iostream>
#include <vector>

int countInversion(int A[], int low, int mid, int high){
    std::vector <int> C = {0};
    int i, j, k;
    int count=0;
    i = low;
    j = mid+1;
    k = low;
    while(i <= mid && j <= high){
        if(A[i] <= A[j]){
            C[k] = A[i];
            i++;
        }
        else{
            C[k] = A[j];
            j++;
            count = count + (mid + 1)-i;
        }
        k++;
    }
    while(i <= mid){
        C[k] = A[i];
        i++;
        k++;
    }
    while(j <= high){
        C[k] = A[j];
        j++;
        k++;
    }
    for(i = low; i < k; i++){
        A[i] = C[i];
    }
    return count;
}


int mergeSort(int A[], int low, int high){
    int count = 0;
    if(low < high){
        int mid = (low + high)/2;
        count = mergeSort(A, low, mid);
        count += mergeSort(A, mid+1, high);
        count += countInversion(A, low, mid, high);
        
    }
    return count;
}

int main(){
    int arr[] = {2,1,3,1,2};
    //int mid = (0 + 4)/2;
    //std::cout << arr[mid] << std::endl;
    /*
    int count = 0;
    for(int i = 0; i < 5; i++){
        for(int j = i+1; j < 5; j++){
            if(arr[i] > arr[j])
                count++;
        }
    }
    std::cout << count << std::endl;
    */
    std::cout << mergeSort(arr, 0, 4) << std::endl;
    
    for(int i = 0; i < 5; i++){
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
    
    return 0;
}
